;Epoch Game Pocket Computer
;Tetris
;ACASM v1.42
;azya, 2023

    RELAXED ON

wIntT EQU 0xFF80

wBitmapWidth EQU 0xFF82
wBitmapShift EQU 0xFF83

wAnimationY EQU 0xFF84
wAnimationRocketPtr EQU 0xFF85
wAnimationRocketPtrL EQU 0xFF85
wAnimationRocketPtrH EQU 0xFF86

wIndex EQU 0xFF87
wScreenLine EQU 0xFF88

wDrawMode EQU 0xFF89

wScoresAdderBCD EQU 0xFF90
wScoresAdderBCDL EQU 0xFF9B

wNoteSheetPtr EQU 0xFFB2
wNoteSheetPtrL EQU 0xFFB2
wNoteSheetPtrH EQU 0xFFB3
rNoteValue EQU 0xFFB4
wSFXBlock EQU 0xFFB5
wNoteSheetRetPtr EQU 0xFFB6
wNoteSheetRetPtrL EQU 0xFFB6
wNoteSheetRetPtrH EQU 0xFFB7

rCurFreqL EQU 0xFFB8
wCounterL EQU 0xFFB9
rCurFreqH EQU 0xFFBA
wCounterH EQU 0xFFBB

wGameStartLevel EQU 0xFFBC
wGameOverCounter EQU 0xFFBD

wPicePos EQU 0xFFC8
wPiceX EQU 0xFFC8
wPiceY EQU 0xFFC9
wCurPice EQU 0xFFCC
wNextPice EQU 0xFFCE

wSeed10 EQU 0xFFD0
wSeed23 EQU 0xFFD1
wKeyUpWaitP1 EQU 0xFFD2
wKeyPressedP1 EQU 0xFFD3
wKeyUpWaitP2 EQU 0xFFD4
wKeyPressedP2 EQU 0xFFD5

wDropCounter EQU 0xFFD6
wRightCounter EQU 0xFFD7
wLeftCounter EQU 0xFFD8

wHideNextPice EQU 0xFFD9

wBufCurLine EQU 0xFFDA
wClearFlags EQU 0xFFDB
wLastLineClearCount EQU 0xFFDC

wFullLine1 EQU 0xFFE0
wFullLine2 EQU 0xFFE1
wFullLine3 EQU 0xFFE2
wFullLine4 EQU 0xFFE3

wScoresBCD EQU 0xFFF0
wScoresBCDH EQU 0xFFF0
wScoresBCDM EQU 0xFFF1
wScoresBCDL EQU 0xFFF2

wLinesCountBCD EQU 0xFFF3
wLinesCountBCDH EQU 0xFFF3
wLinesCountBCDL EQU 0xFFF4

wLevel EQU 0xFFF5
wLevelPBCD EQU 0xFFF6
wLevelIncCounter EQU 0xFFF7

wSkipLeadZeroes EQU 0xFFF8
wDigitsCount EQU 0xFFF9
wDigitMask EQU 0xFFFA


DM_DRAW EQU 0b001
DM_INVERT EQU 0b010
DM_CLEAR EQU 0b100
DM_CHECK EQU 0b1000
DM_CHECKFULL EQU 0b10000

LCD_RST EQU 0b00000001
LCD_T EQU 0b00001000 | LCD_RST
LCD_B EQU 0b00010000 | LCD_RST
LCD_R EQU 0b00100000 | LCD_RST
LCD_D EQU 0b00000100
LCD_E EQU 0b00000010

LCD_DATA_DOWN EQU 0x3A

PA_KEY_P1 EQU 0x80
PA_KEY_P2 EQU 0x40
PC_KEY_P1_UP EQU 0b00001
PC_KEY_P2_DOWN EQU 0b00001
PC_KEY_P1_LEFT EQU 0b00010
PC_KEY_P2_RIGHT EQU 0b00010
PC_KEY_P1_SELECT EQU 0b0100
PC_KEY_P2_START EQU 0b0100
PC_KEY_P1_TB EQU 0b01000
PC_KEY_P2_TA EQU 0b01000
PC_KEY_P1_B EQU 0b10000
PC_KEY_P2_A EQU 0b10000

DISPLAY EQU 0xC000
DISPLAY_SCORES_PTR EQU 0xC12B
DISPLAY_LEVELS_PTR EQU 0xC33A
DISPLAY_LINES_PTR EQU 0xC532

INTT_JMP_4009_FLAG EQU 0x80


    org 4000H
    db 0x55             ;Pokekon Identifier
    dw start

    org 4009H
timerInt:
    ;107+204us
incCounter:
    lxi DE, rCurFreqL
    ldax DE+
    addx DE
    stax DE+
    ldax DE+
    adcx DE
    stax DE-

    dcrw rNoteValue
    jmp skipNextNote
nextNote:
    lhld wNoteSheetPtr
    ldax HL+
setFreqByA:
    oni A, 0x04
    jr setFreqDiv1
setFreqDiv16:
    mov TMM, A
    ani A, 0xF0
    staw rCurFreqL
    rld
    ani A, 0x0F
    stax DE
    ldax HL+
    jr setFreqByAEnd
setFreqDiv1:
    offi A, 0x08
    jr doInstruction
    mov TMM, A
    stax DE
    ldax HL+
    staw rCurFreqL
setFreqByAEnd:
    mov TM, A
    ;stm
    ldax HL+
    staw rNoteValue
    shld wNoteSheetPtr

skipNextNote:
    pop HL
    pop DE
    pop BC
    pop V
    ei
    reti

doInstruction:
    offi A, 0x01
    lxi HL, wNoteSheetRetPtr
    ldax HL+
    staw wNoteSheetPtrL
    ldax HL
    staw wNoteSheetPtrH
    aniw wSFXBlock, 0
    aniw wNoteSheetRetPtrH, 0
    jmp nextNote


start:
    di
    LXI SP, 0xC800

clearWRAM:
    lxi BC, wIntT
    mvi A, 0
clearWRAMLoop:
    stax BC
    inr C
    jr clearWRAMLoop
    
    oriw wIntT, INTT_JMP_4009_FLAG

    oriw wSeed23, 0x25
    oriw wSeed10, 0x31

    call setupLCD
    call dummySilent

    call drawTitleScreen
    ei


screenMainLoop:
    call randomizeAndParseKey
    call writeLCD
    oniw wKeyPressedP2, PC_KEY_P2_START
    jr screenMainLoop


startGameA:
startGameALoop:
    call parseKeyWaitPressedUp
    call drawGameAMenu
    
    ldaw wGameStartLevel
    mov B, A
    offiw wKeyPressedP1, PC_KEY_P1_LEFT
    dcr A
    offiw wKeyPressedP2, PC_KEY_P2_RIGHT
    inr A
    offiw wKeyPressedP1, PC_KEY_P1_UP
    sui A, 5
    offiw wKeyPressedP2, PC_KEY_P2_DOWN
    adi A, 5
    gti A, 9
    staw wGameStartLevel

    ldaw wGameStartLevel
    eqa A, B
    call menuNavSFX
    mvi B, 28
    lti A, 5
    mvi B, 36
    lti A, 5
    sui A, 5
    add A, A
    add A, A
    add A, A
    adi A, 18
    mov C, A

    lxi HL, btmSelectLevel
    oniw wCounterH, 0x80
    call invertBitmap
    call writeLCD

    oniw wKeyPressedP2, PC_KEY_P2_START | PC_KEY_P2_A
    jmp startGameALoop

    call drawGameAScreen


newGame:
    ldaw wGameStartLevel
    staw wLevelPBCD
    staw wLevel
    
    staw wIndex
startGameASetLevelLoop:
    ldaw wLevelIncCounter
    adi A, 10
    staw wLevelIncCounter
    call incScoreAdder
    dcrw wIndex
    jr startGameASetLevelLoop

    dcrw wLevelIncCounter

    ldaw wSeed10
    ani A, 0xF0
    staw wNextPice

    mvi A, 0
    staw wScoresBCDL
    staw wScoresBCDM
    staw wScoresBCDH
    staw wLinesCountBCDL
    staw wLinesCountBCDH
    staw wGameOverCounter

newPice:
    call drawLevelLinesScores
    oriw wKeyUpWaitP2, PC_KEY_P2_DOWN | PC_KEY_P2_START

genNextPice:
    ldaw wCurPice
    ani A, 0xF0
    mov B, A
    ldaw wNextPice
    staw wCurPice
    mov D, A
    mvi C, 2
genNextPiceRand:
    call randomizeAndParseKey
    ldaw wSeed10
    ani A, 0xF0
    staw wNextPice
    ora A, D
    ora A, B
    eqa A, B
    jr drawNewPice
    dcr C
    jr genNextPiceRand

drawNewPice:
    lxi HL, 3 << 8 | 5
    shld wPicePos

    call showNextPice

    call writeLCD

    mvi A, 0
    staw wLastLineClearCount
    staw wCounterL
    staw wCounterH

    call checkCollision
    jmp gameLoop

gameOver:
    inrw wGameOverCounter
    gtiw wGameOverCounter, 2
    jmp gameLoop
    call gameOverSFX
    lxi HL, gameOverBriksEnd - 1

gameOverAnimation:
    mvi A, 15
    staw wIndex
gameOverAnimationLoop: 
    ldaw wIndex
    adi A, DISPLAY >> 8
    mov D, A
    mvi E, 37

gameOverAnimationLineLoop:
    ldax HL-
    stax DE-
    mov A, E
    eqi A, 7
    jr gameOverAnimationLineLoop

    push HL
    call writeLCDPlayfield
    pop HL

    neiw wIndex, 8
    mvi A, 36
    mvi A, 2
    call delayFrames

    dcrw wIndex
    jmp gameOverAnimationLoop

gameOverWaitKey:
    call randomizeAndParseKey
    oniw wKeyPressedP2, PC_KEY_P2_START
    jr gameOverWaitKey
    call animationRocket
    jmp startGameA

    
gameLoop:
    lxi HL, delayByLevel
    ldaw wLevel
    add A, L
    mov L, A
    ldax HL
    staw wDropCounter
gameLoopDraw:
    eqiw wGameOverCounter, 0
    call writeLCDPlayfield
    call invertPice
    ;oniw wDropCounter, 1        ;30FPS
    call writeLCDPlayfield
    call invertPice

gameLoopFrameDelay:    
    call randomizeAndParseKey

    gtiw wCounterH, 0x0C
    jr gameLoopFrameDelay
    di
    ldaw wCounterL
    sui A, 0x44
    staw wCounterL
    ldaw wCounterH
    sbi A, 0x0C
    staw wCounterH
    ei

    offiw wKeyPressedP1, PC_KEY_P1_SELECT
    call switchNextPice
    offiw wKeyPressedP2, PC_KEY_P2_START
    call pauseScreen
    offiw wKeyPressedP2, PC_KEY_P2_RIGHT
    call rightPice
    aniw wRightCounter, 0
    offiw wKeyPressedP1, PC_KEY_P1_LEFT
    call leftPice
    aniw wLeftCounter, 0
    offiw wKeyPressedP2, (PC_KEY_P2_A | PC_KEY_P2_TA)
    call clockwisePice
    offiw wKeyPressedP1, (PC_KEY_P1_B | PC_KEY_P1_TB)
    call counterclockwisePice
    offiw wKeyPressedP2, PC_KEY_P2_DOWN
    call softDrop
    
    dcrw wDropCounter
    jmp gameLoopDraw

    ;dropPice
    inrw wPiceY
    call checkCollision
    jmp gameLoop            ;passed
                            ;collision
    ;piceLanded
    call piceLandedSFX      
    dcrw wPiceY         
    ;call drawPice
    call processFullLines
    jmp newPice


parseKeyWaitPressedUp:
    lxi HL, wKeyPressedP2
    ldax HL-
    orax HL
    stax HL-
    ldax HL-
    orax HL
    stax HL

randomizeAndParseKey:
    lxi HL, wSeed10
    ldax HL+
    addx HL-
    ani A, 0x0F
    lti A, 7
    sui A, 7
    rld
    inx HL
    rrd

    ;parseKey
    inx HL          ;wKeyUpWaitP1
    mvi A, PA_KEY_P1 | LCD_E | LCD_R
    call parseKeyReadPort
    mvi A, PA_KEY_P2 | LCD_E | LCD_R
parseKeyReadPort:
    mov PA, A
    mov A, PC
    xri A, 0xFF
    mov B, A
    anax HL         ;wKeyUpWaitPx
    stax HL+        ;wKeyUpWaitPx
    xra A, B
    stax HL+        ;wKeyPressedPx
    ret


clockwisePice:
    oriw wKeyUpWaitP2, (PC_KEY_P2_A | PC_KEY_P2_TA)
    call incPiceRotate
    call checkCollision
    jmp rotateSFX              ;passed
decPiceRotate:                 ;collision
    ldaw wCurPice
    xri A, 0b0100
    offi A, 0b0100
    xri A, 0b1000
    staw wCurPice
    ret

counterclockwisePice:
    oriw wKeyUpWaitP1, (PC_KEY_P1_B | PC_KEY_P1_TB)
    call decPiceRotate
    call checkCollision
    jmp rotateSFX               ;passed
incPiceRotate:                  ;collision
    ldaw wCurPice
    xri A, 0b0100
    oni A, 0b0100
    xri A, 0b1000
    staw wCurPice
    ret

rightPice:
    inrw wRightCounter
    neiw wRightCounter, 1
    jr rightPiceDo
    eqiw wRightCounter, 24
    rets
    aniw wRightCounter, ~8 ;-8
rightPiceDo:
    inrw wPiceX
    call checkCollision
    jr movePiceOk               ;passed
    dcrw wPiceX                 ;collision
    rets

leftPice:
    inrw wLeftCounter
    neiw wLeftCounter, 1
    jr leftPiceDo
    eqiw wLeftCounter, 24
    rets
    aniw wLeftCounter, ~8 ;-8
leftPiceDo:
    dcrw wPiceX
    call checkCollision
    jr movePiceOk               ;passed
    inrw wPiceX                 ;collision
    rets
movePiceOk:
    call piceMoveSFX
    rets

softDrop:
    oniw wKeyPressedP2, PC_KEY_P2_RIGHT
    offiw wKeyPressedP1, PC_KEY_P1_LEFT
    ret
    gtiw wDropCounter, 2
    ret
    mvi A, 2
    staw wDropCounter
    lxi DE, scoresAdderInc + 2
    jmp addScoresDE


drawPiceAndCheckFull:
    mvi A, DM_DRAW
checkCollision:
    mvi A, DM_CHECK
invertPice:
    mvi A, DM_INVERT
    staw wDrawMode

    ;prepare pice pointer
    mvi H, pice >> 8
    ldaw wCurPice
    mov L, A

    mvi D, tbl3x1 >> 8

drawPiceLoop:
    lbcd wPicePos               ; B <- PiceY, C <- PiceX
    
    ;get X
    rld                         ; A <- (HL.4_)
    ani A, 0x0F
    add A, C                    ; * 3
    add A, C                    ;
    add A, C                    ;

    ;set display pointer (BC) by pice X
    mov C, A

    ;get Y
    ldax HL+
    ani A, 0x0F
    add A, B

    staw wBufCurLine

    ;set display pointer (BC) by pice Y
    mvi B, (DISPLAY >> 8) - 1
    offi A, 0x08
    mvi B, (DISPLAY >> 8) + 2
    offi A, 0x10
    mvi B, (DISPLAY >> 8) + 5
    offi A, 0x04
    inr B

    ;set tbl3x1 pointer (DE) by pice Y
    ral
    ani A, 0x0E
    adi A, tbl3x1 & 0xFF
    mov E, A

    ldax DE+
    offiw wDrawMode, DM_INVERT
    jmp xorDE_BC
    oniw wDrawMode, DM_CHECK
    jr orDE_BC

checkDEtoBC:
    eqiw wBufCurLine, 24    ;check bottom
    offax BC
    rets
    inr B
    ldax DE+
    offax BC
    rets
    mov A, L
    offi A, 0x03
    jmp drawPiceLoop
    aniw wGameOverCounter, 0
    ret

orDE_BC:
    orax BC
    stax BC
    inr C
    stax BC
    inr C
    stax BC
    inr B           ;next line
    ldax DE
    orax BC
    stax BC
    dcr C
    stax BC
    dcr C
    stax BC
checkFull:
    mvi C, 8
checkFullLoop:
    ldax DE
    offax BC
    jr checkFullSkip
    dcr B
    dcx DE
    ldax DE+
    onax BC
    jmp drawPiceNextLine  ;not full
    inr B
checkFullSkip:
    mov A, C
    adi A, 3
    mov C, A
    eqi A, 38
    jr checkFullLoop
    ;is full
    dcx HL
    ldax HL+
    ani A, 0x0F
    lxi BC, wFullLine1
    add A, C
    mov C, A
    ldax BC
    nei A, 0
    inrw wLastLineClearCount
    ldaw wBufCurLine
    stax BC
    jr drawPiceNextLine

xorDE_BC:
    xrax BC
    stax BC
    inr C
    stax BC
    inr C
    stax BC
    inr B           ;next line
    ldax DE+
    xrax BC
    stax BC
    dcr C
    stax BC
    dcr C
    stax BC

drawPiceNextLine:
    mov A, L
    offi A, 0x03
    jmp drawPiceLoop
    ret


hideNextPice:
    lxi BC, 51 << 8 | 56
    lxi HL, btmClearNextPice
    jmp clearBitmap

switchNextPice:
    oriw wKeyUpWaitP1, PC_KEY_P1_SELECT
    ldaw wHideNextPice
    xri A, 1
    staw wHideNextPice

showNextPice:
    call hideNextPice
    neiw wHideNextPice, 1
    jmp writeLCDNextPice
    lbcd wPicePos
    push BC
    ldaw wCurPice
    push V
    mvi A, 18
    staw wPiceX
    staw wPiceY
    ldaw wNextPice
    staw wCurPice
    call invertPice
    pop V
    staw wCurPice
    pop BC
    sbcd wPiceX
    jmp writeLCDNextPice


processFullLines:
    call drawPiceAndCheckFull
    neiw wLastLineClearCount, 0
    ret
    call lineClearSFX
    neiw wLastLineClearCount, 4
    call lineClear4SFX
    
    mvi A, 0
    staw wCounterL
    staw wCounterH

    mvi A, 6
processFullLinesLoop:
    push V

invertFullLines:
    lxi HL, wFullLine1
invertFullLinesLoop:
    ldax HL+                    ;get full line Y

    lxi BC, (DISPLAY - (1 << 8)) | 8
    offi A, 0x08
    mvi B, (DISPLAY >> 8) + 2
    offi A, 0x10
    mvi B, (DISPLAY >> 8) + 5
    offi A, 0x04
    inr B
    
    lxi DE, tbl3x1
    ral
    ani A, 0x0E
    add A, E
    mov E, A

invertFullLineLoop:
    ldax BC
    xrax DE+
    stax BC
    inr B
    ldax BC
    xrax DE-
    stax BC
    dcr B
    inr C
    mov A, C
    eqi A, 38
    jmp invertFullLineLoop

invertFullLinesSkip:
    mov A, L
    gti A, wFullLine4 & 0xFF
    jmp invertFullLinesLoop
    
processFullLinesDelay:
    call writeLCDPlayfield
    mvi A, 11
    call delayFrames
    
    pop V
    dcr A
    jmp processFullLinesLoop

clearLines:
    lxi HL, wFullLine1
clearLinesLoopFulls:
    mvi C, 8
clearLinesLoopCols:
    ldax HL
    suinb A, 3              ;top 3 lines are not used
    jmp clearLinesSkipLine    
    staw wIndex

    lxi DE, tbl3x1 + 6      ;top 3 lines are not used
    aniw wClearFlags, 0
    mvi B, DISPLAY >> 8 - 1
clearLinesLoop:
    call clearLinesPrepareBC
    inr C
    stax BC
    inr C
    stax BC
    inr B

    call clearLinesPrepareBC
    dcr C
    stax BC
    dcr C
    stax BC

    mov A, E
    eqi A, tbl3x1Half & 0xFF
    dcr B
    eqi A, tbl3x1End & 0xFF
    jr clearLinesLoopSkip
    lxi DE, tbl3x1
    inr B
    inr B
clearLinesLoopSkip:

    aniw wClearFlags, 0x01
    inrw wClearFlags
    aniw wClearFlags, 0xFE

    dcrw wIndex
    jmp clearLinesLoop

    mov A, C
    adi A, 3
    mov C, A
    eqi A, 38
    jmp clearLinesLoopCols

clearLinesSkipLine:
    mvi A, 0
    stax HL+
    mov A, L
    gti A, wFullLine4 & 0xFF
    jmp clearLinesLoopFulls

    call piceLandedSFX

    call writeLCDPlayfield
    mvi A, 22
    call delayFrames
    ;
    ;
incLevel:
    ldaw wLastLineClearCount
    mov B, A
    ldaw wLevelIncCounter
    subnb A, B
    adi A, 10
    staw wLevelIncCounter
    skn CY
    jr incLevel1
    jr incLevelEnd
    ltiw wLevelPBCD, 20
    jr incLevelEnd
incLevel1:
    call levelUpSFX
    call incScoreAdder
    inrw wLevel
    ldaw wLevelPBCD
    inr A
    daa
    staw wLevelPBCD
incLevelEnd:
    ;
    ;
addClearCount:
    lxi HL, wLinesCountBCDL
    ldaw wLastLineClearCount
    addx HL
    daa
    stax HL-
    ldax HL
    aci A, 0
    daa
    stax HL
    skn CY
    call fix9999
    ;
    ;
addScores:
    lxi DE, wScoresAdderBCD - 1
    lxi BC, wLastLineClearCount
    ldax BC
    addx BC
    addx BC
    add A, E
    mov E, A

addScoresDE:
    lxi HL, wScoresBCDL
    
    mvi B, 2
addPackedBCD:
    clc
addPackedBCDLoop:
    ldax DE-
    adcx HL
    daa
    stax HL-
    dcr B
    jr addPackedBCDLoop

check999999:
    skn CY
    jr fix999999
    ret
fix999999:
    mvi A, 0x99
    inx HL
    stax HL+
fix9999:
    mvi A, 0x99
    stax HL+
    stax HL
    ret

incScoreAdder:
    lxi HL, wScoresAdderBCDL
    lxi DE, scoresAdderByLevel + 11
    mvi B, 11
    jmp addPackedBCD


drawLevelLinesScores:
drawLevel:
    lxi DE, DISPLAY_LEVELS_PTR
    lxi BC, wLevelPBCD
    lxi HL, levelDigits
    mvi A, 1
    call drawDigits

drawLinesCount:
    lxi DE, DISPLAY_LINES_PTR
    lxi BC, wLinesCountBCD
    lxi HL, linesDigits
    mvi A, 3
    call drawDigits

drawScores:
    lxi DE, DISPLAY_SCORES_PTR
    lxi BC, wScoresBCD
    lxi HL, scoreDigits
    mvi A, 5

drawDigits:
    staw wDigitsCount
    staw wSkipLeadZeroes
    ldax HL+
    staw wDigitMask

drawDigitsLoop:
    push HL
    ldax HL+                    ;Digit width
    staw wIndex
    ldax BC
    oniw wDigitsCount, 1
    jr drawDigitL
drawDigitH:
    rar
    rar
    jr drawDigit
drawDigitL:
    inx BC
    ral
    ral    
drawDigit:
    ani A, 0x3C
    skn Z                       ;skip
    neiw wSkipLeadZeroes, 255   ;all
    aniw wSkipLeadZeroes, 0     ;leading
    dcrw wSkipLeadZeroes        ;zeroes
    lxi HL, digitSkip           ;
drawDigitCopy:
    addnc A, L
    mvi H, (digits >> 8) + 1
    mov L, A
drawDigitCopyLoop:
    ldaw wDigitMask
    anax DE
    orax HL+
    stax DE+
    dcrw wIndex
    jr drawDigitCopyLoop
    inx DE

    pop HL
    dcrw wDigitsCount
    jmp drawDigitsLoop
    ret


pauseScreen:
    call pauseSFX
    call hideNextPice
    call writeLCDNextPice
pauseScreenLoop:
    call parseKeyWaitPressedUp
    LXI DE, pauseText
    call writeLCDPlayfieldROM
    oniw wKeyPressedP2, PC_KEY_P2_START
    jr pauseScreenLoop
    oriw wKeyUpWaitP2, PC_KEY_P2_START
    jmp showNextPice


animationRocket:
    gtiw wScoresBCDH, 0x09
    ret
    lxi HL, btmRocketSmallData
    ltiw wScoresBCDH, 0x15
    lxi HL, btmRocketMidData
    ltiw wScoresBCDH, 0x20
    lxi HL, btmRocketBigData
    shld wAnimationRocketPtr

    call rocketSong
    call drawLaunchPadScreen

    mvi A, 49
    staw wAnimationY

    mvi A, 109
    staw wIndex
    jmp animationRocketLiftoff
animationRocketLoop:
    ltiw wIndex, 91
    jmp animationRocketSkipLiftoff

    gtiw wIndex, 58
    jmp animationRocketLiftoff
    lxi BC, 44 << 8 | 22
    lxi HL, btmFume
    call invertBitmap
    jmp animationRocketSkipLiftoff

animationRocketLiftoff:
    lhld wAnimationRocketPtr
    ldaw wAnimationY
    subx HL+
    mov B, A
    ldax HL+
    mov C, A
    push HL
    call invertBitmap
    pop HL
    neiw wIndex, 109
    jmp animationRocketSkipLiftoff
    dcrw wAnimationY
    nop
    dcr B
    nop
animationRocketLoopStart:
    call invertBitmap

    ltiw wIndex, 57
    jmp animationRocketSkipLiftoff
    mvi C, 33
    ldaw wAnimationY
    adi A, 1
    mov B, A
    lxi HL, btmFireBigMask
    call clearBitmap

    mvi B, 49
    lxi HL, btmLaunchPad
    call clearBitmap
    lxi HL, btmLaunchPad
    call invertBitmap
    
    ldaw wAnimationY
    mov B, A
    lxi HL, btmFireBigMask
    offiw wIndex, 1
    lxi HL, btmFireSmallMask
    call clearBitmap
    call invertBitmap
animationRocketSkipLiftoff:

    call writeLCD
    mvi A, 8
    call delayFrames
    dcrw wIndex
    jmp animationRocketLoop

    mvi A, 184
    call delayFrames

    jmp dummySilent


    ;HL - bitmap pointer
    ;BC - Y, X
clearBitmap:
    mvi A, DM_CLEAR
invertBitmap:
    mvi A, DM_INVERT
    staw wDrawMode
drawBitmap:
    mov A, B
    staw wBitmapShift
    aniw wBitmapShift, 0x07
    adi A, 192                  ;fix if y < 0
    rar
    rar
    rar
    ani A, 0x1F
    adi A, (DISPLAY >> 8) - (192 >> 3)
    staw wScreenLine

    ldax HL+
    dcr A
drawBitmapLoopY:
    staw wBitmapWidth
    push BC
drawBitmap8LoopX:
    ldaw wBitmapShift
    mov B, A

    ldax HL+
    mov D, A
    mvi E, 0
    jr drawBitmapShiftLoopStart
drawBitmapShiftLoop:
    mov A, D
    add A, A
    mov D, A
    mov A, E
    ral
    mov E, A
drawBitmapShiftLoopStart:
    dcr B
    jr drawBitmapShiftLoop

    ldaw wScreenLine
    mov B, A
    mov A, D

    offiw wDrawMode, DM_INVERT
    jr drawBitmapXorBC_A

drawBitmapNandBC_A:
    xri A, 0xFF
    anax BC
    stax BC
    inr B
    mov A, E
    xri A, 0xFF
    anax BC
    jr drawBitmapSave

drawBitmapXorBC_A:
    xrax BC
    stax BC
    inr B
    ldax BC
    xra A, E

drawBitmapSave:
    stax BC
    inr C
    dcrw wBitmapWidth
    jmp drawBitmap8LoopX

    pop BC
    inrw wScreenLine

    ldax HL+
    dcr A
    jmp drawBitmapLoopY
    ret


delayFrames:
delayFramesLoop:
    push V
delayOneFrameLoop:
    gtiw wCounterH, 0x0C
    jr delayOneFrameLoop
    di
    ldaw wCounterL
    sui A, 0x44
    staw wCounterL
    ldaw wCounterH
    sbi A, 0x0C
    staw wCounterH
    ei

    pop V
    dcr A
    jr delayFramesLoop
    ret


clearLinesPrepareBC:
    ;get next clear
    ldax DE+
    offax BC
    oriw wClearFlags, 0x1
    ;set clear
    oniw wClearFlags, 0x2
    jr clearLinesPrepareBCClear
clearLinesPrepareBCAdd:
    orax BC
    jr clearLinesPrepareBCSkip
clearLinesPrepareBCClear:
    xri A, 0xFF
    anax BC
clearLinesPrepareBCSkip:
    stax BC
    ret


levelUpSFX:
    oriw wSFXBlock, 1
    lxi HL, levelUpSFXData
    jmp soundFX
dummySilent:
    lxi HL, dummySilentData
rocketSong:
    lxi HL, rocketSongData
pauseSFX:
    lxi HL, pauseSFXData
menuNavSFX:
    lxi HL, menuNavSFXData
gameOverSFX:
    lxi HL, gameOverSFXData
lineClear4SFX:
    lxi HL, lineClear4SFXData
lineClearSFX:
    lxi HL, lineClearSFXData
piceLandedSFX:
    lxi HL, piceLandedSFXData
rotateSFX:
    lxi HL, rotateSFXData
piceMoveSFX:
    lxi HL, piceMoveSFXData
    eqiw wSFXBlock, 0
    ret
soundFX:
    di
    lded wNoteSheetPtr
    neiw wNoteSheetRetPtrH, 0
    sded wNoteSheetRetPtr
    shld wNoteSheetPtr
    aniw rNoteValue, 0
    ei
    ret


drawLaunchPadScreen:
    lxi HL, launchPadScreen
drawGameAMenu:
    lxi HL, gameAMenu
drawTitleScreen:
    lxi HL, titleScreen
drawGameAScreen:
    lxi HL, gameAScreen
    mvi B, DISPLAY >> 8
drawScreenYLoop:
    mvi C, 74
drawScreenXLoop:
    ldax HL+
    stax BC
    dcr C
    jr drawScreenXLoop
    inr B
    mov A, B
    eqi A, DISPLAY >> 8 + 8
    jr drawScreenYLoop
    ret


setupLCD:
    mvi A, LCD_DATA_DOWN
    mov PB, A
    mvi A, LCD_T | LCD_E
    mov PA, A
    ani PA, ~LCD_E
    ret


writeLCDPlayfieldROM:
    lxi BC, 0x29 << 8 | 5
    call drawTopLeftLine_
    lxi BC, 0x69 << 8 | 5
    call drawTopLeftLine_
    lxi BC, 0xA9 << 8 | 5
    call drawTopLeftLine_
    lxi BC, 0xE9 << 8 | 5
    call drawTopLeftLine_
    lxi BC, 0x08 << 8 | 5
    call drawBottomLeftLine_ 
    lxi BC, 0x48 << 8 | 5
    call drawBottomLeftLine_
    lxi BC, 0x88 << 8 | 5
    call drawBottomLeftLine_
    lxi BC, 0xC8 << 8 | 5
    jmp drawBottomLeftLine_


writeLCDPlayfield:
    lxi DE, DISPLAY - 256

    lxi BC, 0x29 << 8 | 5
    call drawTopLeftLine8
    lxi BC, 0x69 << 8 | 5
    call drawTopLeftLine8
    lxi BC, 0xA9 << 8 | 5
    call drawTopLeftLine8
    lxi BC, 0xE9 << 8 | 5
    call drawTopLeftLine8
    lxi BC, 0x08 << 8 | 5
    call drawBottomLeftLine8
    lxi BC, 0x48 << 8 | 5
    call drawBottomLeftLine8
    lxi BC, 0x88 << 8 | 5
    call drawBottomLeftLine8
    lxi BC, 0xC8 << 8 | 5
    jmp drawBottomLeftLine8

writeLCDNextPice:
    lxi DE, DISPLAY + 256 * 6 + 55
    lxi BC, 0x9E << 8 | 2
    call drawRightLine
    lxi DE, DISPLAY + 256 * 7 + 55
    lxi BC, 0xDE << 8 | 2
    jmp drawRightLine

writeLCD:
    LXI DE, DISPLAY - 256

    lxi BC, 0x31 << 8 | 9
    call drawTopLeftLine 
    lxi BC, 0x00 << 8 | 4
    call drawRightLine
    lxi BC, 0x71 << 8 | 9
    call drawTopLeftLine 
    lxi BC, 0x40 << 8 | 4
    call drawRightLine
    lxi BC, 0xB1 << 8 | 9
    call drawTopLeftLine 
    lxi BC, 0x80 << 8 | 4
    call drawRightLine
    lxi BC, 0xF1 << 8 | 9
    call drawTopLeftLine 
    lxi BC, 0xC0 << 8 | 4
    call drawRightLine
    lxi BC, 0x00 << 8 | 9
    call drawBottomLeftLine
    lxi BC, 0x19 << 8 | 4
    call drawRightLine
    lxi BC, 0x40 << 8 | 9
    call drawBottomLeftLine
    lxi BC, 0x59 << 8 | 4
    call drawRightLine
    lxi BC, 0x80 << 8 | 9
    call drawBottomLeftLine
    lxi BC, 0x99 << 8 | 4
    call drawRightLine
    lxi BC, 0xC0 << 8 | 9
    call drawBottomLeftLine
    lxi BC, 0xD9 << 8 | 4
    jr drawRightLine


drawTopLeftLine8:
    lxi HL, (LCD_T | LCD_D | LCD_E) << 8 | LCD_T | LCD_D
drawBottomLeftLine8:
    lxi HL, (LCD_B | LCD_D | LCD_E) << 8 | LCD_B | LCD_D
    mov A, D
    inr A
    mov D, A
    mvi E, 8
    jr drawCcols  

drawTopLeftLine:
    mvi E, 255
    inx DE
drawTopLeftLine_:
    lxi HL, (LCD_T | LCD_D | LCD_E) << 8 | LCD_T | LCD_D
    jr drawCcols  
drawBottomLeftLine:
    mvi E, 255
    inx DE
drawBottomLeftLine_:
    lxi HL, (LCD_B | LCD_D | LCD_E) << 8 | LCD_B | LCD_D
drawRightLine:
    lxi HL, (LCD_R | LCD_D | LCD_E) << 8 | LCD_R | LCD_D

drawCcols:
    mov A, B
    mov PB, A 
    mvi A, LCD_T | LCD_B | LCD_R | LCD_E
    mov PA, A
    ani PA, ~LCD_E
drawCcols_loop:
    REPT 5
    ldax DE+
    mov PB, A
    mov A, H
    mov PA, A
    mov A, L
    mov PA, A
    ENDM
    dcr C
    jmp drawCcols_loop
    ret


digits:
scoreDigits:
    db 0b00000011   ;mask
    db 4-1          ;width
scoreDigits0:
    db 0b01111000
    db 0b10000100
    db 0b11111100
    db 0b01111000
scoreDigits1:
    db 0b10001000
    db 0b11111100
    db 0b11111100
    db 0b10000000
scoreDigits2:
    db 0b11001000
    db 0b11100100
    db 0b10111100
    db 0b10011000
scoreDigits3:
    db 0b10000100
    db 0b10010100
    db 0b11111100
    db 0b01101000
scoreDigits4:
    db 0b00111100
    db 0b00100000
    db 0b11111100
    db 0b11111100
scoreDigits5:
    db 0b10011100
    db 0b10010100
    db 0b11110100
    db 0b01100000
scoreDigits6:
    db 0b01111000
    db 0b11111100
    db 0b10010100
    db 0b01100000
scoreDigits7:
    db 0b00000100
    db 0b11100100
    db 0b11110100
    db 0b00001100
scoreDigits8:
    db 0b01101000
    db 0b10010100
    db 0b11111100
    db 0b01101000
scoreDigits9:
    db 0b00011000
    db 0b10100100
    db 0b11111100
    db 0b01111000

levelDigits:
    db 0b00000111   ;mask
    db 3-1          ;width
levelDigits0:
    db 0b11111000
    db 0b10001000
    db 0b11111000
    db 0b00000000
levelDigits1:
    db 0b10010000
    db 0b11111000
    db 0b10000000
    db 0b00000000
levelDigits2:
    db 0b11101000
    db 0b10101000
    db 0b10111000
    db 0b00000000
levelDigits3:
    db 0b10101000
    db 0b10101000
    db 0b11111000
    db 0b00000000
levelDigits4:
    db 0b01111000
    db 0b01000000
    db 0b11111000
    db 0b00000000
levelDigits5:
    db 0b10111000
    db 0b10101000
    db 0b11101000
    db 0b00000000
levelDigits6:
    db 0b11111000
    db 0b10101000
    db 0b11101000
    db 0b00000000
levelDigits7:
    db 0b00001000
    db 0b11101000
    db 0b00011000
    db 0b00000000
levelDigits8:
    db 0b11111000
    db 0b10101000
    db 0b11111000
    db 0b00000000
levelDigits9:
    db 0b10111000
    db 0b10101000
    db 0b11111000

linesDigits:
    db 0b11100000   ;mask
    db 3-1          ;width
linesDigits0:
    db 0b00011111
    db 0b00010001
    db 0b00011111
    db 0b00000000
linesDigits1:
    db 0b00010010
    db 0b00011111
    db 0b00010000
    db 0b00000000
linesDigits2:
    db 0b00011101
    db 0b00010101
    db 0b00010111
    db 0b00000000
linesDigits3:
    db 0b00010101
    db 0b00010101
    db 0b00011111
    db 0b00000000
linesDigits4:
    db 0b00001111
    db 0b00001000
    db 0b00011111
    db 0b00000000
linesDigits5:
    db 0b00010111
    db 0b00010101
    db 0b00011101
    db 0b00000000
linesDigits6:
    db 0b00011111
    db 0b00010101
    db 0b00011101
    db 0b00000000
linesDigits7:
    db 0b00000001
    db 0b00011101
    db 0b00000011
    db 0b00000000
linesDigits8:
    db 0b00011111
    db 0b00010101
    db 0b00011111
    db 0b00000000
linesDigits9:
    db 0b00010111
    db 0b00010101
    db 0b00011111

digitSkip:
    db 0b00000000
    db 0b00000000
    db 0b00000000
    db 0b00000000

gameAScreen:
    db 0x5F, 0x2F, 0x5F, 0x03, 0x45, 0x55, 0x7D, 0x7D, 0x01, 0x69, 0x15, 0x7D, 0x7D, 0x01, 0x39, 0x45, 0x7D, 0x39, 0x01, 0x29, 0x45, 0x7D, 0x39, 0x01, 0x35, 0x75, 0x5D, 0x49, 0x03, 0x5F, 0x2F, 0x5F, 0x00, 0xEE, 0xBB, 0xEE, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0xEE, 0xBB, 0xEE, 0x00, 0xFF, 0xFF, 0xFF
    db 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0xEE, 0xBB, 0xEE, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0xEE, 0xBB, 0xEE, 0x00, 0xFF, 0xFF, 0xFF
    db 0xFA, 0xFA, 0xFA, 0xFA, 0x3A, 0x1A, 0x1A, 0x1A, 0xDA, 0x1A, 0x5A, 0xDA, 0xDA, 0x1A, 0xDA, 0x1A, 0xDA, 0x1A, 0x1A, 0x5A, 0xDA, 0xDA, 0x1A, 0x1A, 0x1A, 0xDA, 0x1A, 0x3A, 0xFA, 0xFA, 0xFA, 0xFA, 0x00, 0xEE, 0xBB, 0xEE, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0xEE, 0xBB, 0xEE, 0x00, 0xFF, 0xFF, 0xFF
    db 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x02, 0x02, 0x03, 0x00, 0x02, 0x02, 0x03, 0x00, 0x01, 0x02, 0x01, 0x00, 0x00, 0x02, 0x02, 0x03, 0x00, 0x02, 0x02, 0x03, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xEE, 0xBB, 0xEE, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0xEE, 0xBB, 0xEE, 0x00, 0xFF, 0xFF, 0xFF
    db 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x02, 0x2A, 0x5A, 0x52, 0x02, 0x4A, 0x5A, 0x7A, 0x02, 0x7A, 0x22, 0x12, 0x7A, 0x02, 0x4A, 0x7A, 0x4A, 0x02, 0x42, 0x42, 0x7A, 0x02, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xEE, 0xBB, 0xEE, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0xEE, 0xBB, 0xEE, 0x00, 0xFF, 0xFF, 0xFF
    db 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xEE, 0xBB, 0xEE, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0xEE, 0xBB, 0xEE, 0x00, 0xFF, 0xFF, 0xFF
    db 0xFF, 0xFF, 0xFF, 0xFF, 0x03, 0xF9, 0x04, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x04, 0xF9, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xEE, 0xBB, 0xEE, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0xEE, 0xBB, 0xEE, 0x00, 0xFF, 0xFF, 0xFF
    db 0xFF, 0xFF, 0xFF, 0xFF, 0xE0, 0xCF, 0x90, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x90, 0xCF, 0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xEE, 0xBB, 0xEE, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0xEE, 0xBB, 0xEE, 0x00, 0xFF, 0xFF, 0xFF

gameAMenu:
    db 0xFF, 0x01, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x55, 0xA9, 0x05, 0x01, 0x15, 0x51, 0xF5, 0xF1, 0x05, 0x61, 0x95, 0xF1, 0xF5, 0x01, 0x75, 0xC1, 0xF5, 0x71, 0x05, 0x11, 0xF5, 0xF1, 0x15, 0x41, 0x45, 0x01, 0xE5, 0x91, 0xF5, 0xE1, 0x05, 0x01, 0x55, 0x01, 0xFF
    db 0xFF, 0x00, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x54, 0xA8, 0x55, 0xA9, 0x55, 0xA9, 0x54, 0xA8, 0x54, 0xA9, 0x55, 0xA8, 0x54, 0xA9, 0x55, 0xA8, 0x54, 0xA8, 0x55, 0xA9, 0x54, 0xA8, 0x54, 0xA8, 0x55, 0xA8, 0x55, 0xA9, 0x54, 0xA8, 0x55, 0x00, 0xFF
    db 0xFF, 0x00, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xFE, 0x83, 0x01, 0x41, 0x41, 0x7D, 0x7D, 0x01, 0x45, 0x55, 0x7D, 0x7D, 0x01, 0x3D, 0x61, 0x7D, 0x3D, 0x01, 0x45, 0x55, 0x7D, 0x7D, 0x01, 0x41, 0x41, 0x7D, 0x7D, 0x01, 0x82, 0x7D, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0x00, 0xFF
    db 0xFF, 0x00, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xFA, 0x0D, 0x0A, 0xED, 0x0A, 0xED, 0x0A, 0x0D, 0xFB, 0x0D, 0x0B, 0xED, 0xAB, 0x2D, 0x0B, 0x0D, 0xFB, 0x0D, 0x0B, 0xED, 0xAB, 0xAD, 0x0B, 0x0D, 0xFB, 0x0D, 0x0B, 0x0D, 0xEB, 0x4D, 0x0B, 0x0D, 0xFB, 0x0D, 0x0A, 0xED, 0x2A, 0xED, 0x0A, 0x0D, 0xFA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0x00, 0xFF
    db 0xFF, 0x00, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xFF, 0x08, 0x08, 0xEB, 0xA9, 0xE9, 0x08, 0x08, 0xFF, 0x08, 0x08, 0xEB, 0xAA, 0xEA, 0x08, 0x08, 0xFF, 0x08, 0x08, 0x6A, 0xAA, 0x2B, 0x08, 0x08, 0xFF, 0x08, 0x08, 0xAA, 0xAB, 0xEA, 0x08, 0x08, 0xFF, 0x08, 0x08, 0xAB, 0xAA, 0xEB, 0x08, 0x08, 0xFF, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0x00, 0xFF
    db 0xFF, 0x00, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAF, 0x58, 0xA8, 0x5B, 0xAA, 0x5A, 0xA8, 0x58, 0xAF, 0x58, 0xA8, 0x5B, 0xAA, 0x5B, 0xA8, 0x58, 0xAF, 0x58, 0xA8, 0x58, 0xAB, 0x58, 0xA8, 0x58, 0xAF, 0x58, 0xA8, 0x5B, 0xAA, 0x5B, 0xA8, 0x58, 0xAF, 0x58, 0xA8, 0x5B, 0xAA, 0x5A, 0xA8, 0x58, 0xAF, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0x00, 0xFF
    db 0xFF, 0x00, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0x00, 0xFF
    db 0xFF, 0x80, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0xAA, 0x95, 0x80, 0xFF

titleScreen:
    db 0xFF, 0xFF, 0xAB, 0x57, 0xFB, 0x17, 0x1B, 0x17, 0x1B, 0x17, 0x1B, 0x97, 0x9B, 0x97, 0x9B, 0x97, 0x9B, 0x17, 0x1B, 0x97, 0x9B, 0x97, 0x1B, 0x17, 0x1B, 0x97, 0x9B, 0x97, 0x1B, 0x97, 0x9B, 0x97, 0x1B, 0x97, 0x9B, 0x97, 0x9B, 0x97, 0x9B, 0x97, 0x9B, 0x97, 0x9B, 0x97, 0x1B, 0x97, 0x9B, 0x97, 0x9B, 0x97, 0x1B, 0x97, 0x9B, 0x97, 0x1B, 0x97, 0x9B, 0x97, 0x9B, 0x97, 0x9B, 0x97, 0x9B, 0x97, 0x9B, 0x97, 0x1B, 0x17, 0x1B, 0x17, 0xFB, 0x57, 0xAB, 0xFF, 0xFF
    db 0xFF, 0xFF, 0xAA, 0x55, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9F, 0xCA, 0xE5, 0xF2, 0xDD, 0x6A, 0x35, 0x00, 0xEB, 0xD5, 0xEB, 0x00, 0x1E, 0x35, 0x6A, 0x55, 0x7F, 0x00, 0xEB, 0xD5, 0xEB, 0x00, 0x0F, 0x05, 0x02, 0x01, 0xEA, 0xD5, 0xEA, 0x01, 0x02, 0x05, 0x0F, 0x00, 0x0F, 0x05, 0xF2, 0xE1, 0x40, 0x00, 0xEB, 0xD5, 0xEB, 0x00, 0x0F, 0x05, 0x02, 0x01, 0xEA, 0xD5, 0xEA, 0x01, 0x02, 0x05, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x55, 0xAA, 0xFF, 0xFF
    db 0xFF, 0xFF, 0xAA, 0x55, 0xBF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xCF, 0xDF, 0xC7, 0xD3, 0xD9, 0xDC, 0xDE, 0xDF, 0xC0, 0xDF, 0xDF, 0xDF, 0xC0, 0xD0, 0xD8, 0xDC, 0xDE, 0xDF, 0xC0, 0xDF, 0xDF, 0xDF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xDF, 0xDF, 0xDF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xDF, 0xDE, 0xDD, 0xD8, 0xD0, 0xC0, 0xDF, 0xDF, 0xDF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xDF, 0xDF, 0xDF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xBF, 0x55, 0xAA, 0xFF, 0xFF
    db 0xFF, 0xFF, 0xFE, 0xFF, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x65, 0x65, 0x05, 0x05, 0x01, 0x19, 0xE5, 0x19, 0x01, 0x05, 0x05, 0x05, 0x25, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x45, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x85, 0x45, 0x25, 0x25, 0x25, 0x45, 0x85, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0xFF, 0xFE, 0xFF, 0xFF
    db 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x60, 0x90, 0x60, 0x00, 0x00, 0x80, 0xC0, 0x20, 0x90, 0xE8, 0x34, 0x0A, 0xF5, 0xCA, 0x94, 0x28, 0xD0, 0xA0, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08, 0x08, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF
    db 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xE0, 0xB0, 0xE8, 0xD7, 0xA8, 0xD0, 0xB8, 0xE7, 0xDF, 0xB0, 0xEF, 0xFF, 0xA0, 0xFC, 0xAF, 0xA7, 0xA3, 0xB0, 0xEF, 0xB7, 0xD8, 0xE7, 0xC0, 0xF0, 0xC0, 0xF0, 0xFF, 0xF0, 0x80, 0x98, 0xFC, 0xFC, 0x98, 0x80, 0xF0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, 0xFF, 0xFF, 0xFF
    db 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x05, 0x7D, 0x7D, 0x05, 0x01, 0x59, 0x25, 0x7D, 0x7D, 0x01, 0x05, 0x7D, 0x7D, 0x05, 0x01, 0x35, 0x75, 0x5D, 0x59, 0x01, 0x01, 0x01, 0x01, 0x35, 0x75, 0x5D, 0x59, 0x01, 0x35, 0x75, 0x5D, 0x59, 0x01, 0x45, 0x55, 0x7D, 0x7D, 0x01, 0x59, 0x25, 0x7D, 0x7D, 0x01, 0x19, 0x25, 0x7D, 0x7D, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x0A, 0x3E, 0x00, 0x1E, 0x28, 0x26, 0x00, 0x26, 0x2A, 0x32, 0x00, 0x3C, 0x0A, 0x3E, 0x00, 0x00, 0x00, 0x34, 0x2A, 0x22, 0x00, 0x2C, 0x2A, 0x3A, 0x00, 0x3C, 0x22, 0x1E, 0x00, 0x24, 0x2A, 0x3A;, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ;
pauseText:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x10, 0x7C, 0x00, 0x7C, 0x00, 0x04, 0x7C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0xA8, 0x68, 0x00, 0x08, 0xF9, 0x08, 0x01, 0xF8, 0x29, 0xF0, 0x01, 0xF8, 0x29, 0xD0, 0x00, 0x08, 0xF8, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x12, 0xF0, 0x12, 0x00, 0xF2, 0x10, 0xE2, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0xE0, 0x20, 0x00, 0xE0, 0x20, 0xC0, 0x00, 0xE0, 0x20, 0xC0, 0x00, 0x25, 0xE0, 0x24, 0x00, 0xE5, 0x01, 0xE4, 0x20, 0xC0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0xA0, 0x20, 0x00
    db 0x00, 0x0B, 0x02, 0x08, 0x01, 0x0A, 0x83, 0x48, 0x43, 0x08, 0xC3, 0x48, 0x80, 0x0B, 0xC0, 0x48, 0x83, 0x48, 0x83, 0x08, 0xC3, 0x48, 0x41, 0x0A, 0x03, 0x08, 0x03, 0x0A, 0x02, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x04, 0x16, 0x00, 0x17, 0x01, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x00, 0x17, 0x05, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ;db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ;
launchPadScreen:
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xAB, 0x55, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xAA, 0x55, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xAA, 0x55, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x80, 0xC0, 0xF8, 0xE0, 0xC0, 0xF0, 0xE0, 0xE0, 0x80, 0xE0, 0xC0, 0xF8, 0xE0, 0xC0, 0xF0, 0xE0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFE, 0x96, 0x9B, 0xFE, 0xF3, 0x93, 0x92, 0xF2, 0xF2, 0x92, 0x92, 0xF2, 0xF2, 0x92, 0x92, 0xF2, 0xF2, 0x92, 0x92, 0xF2, 0xF2, 0x92, 0x92, 0xF2, 0xF2, 0x92, 0x92, 0xF2, 0xFE, 0x96, 0x9A, 0xFE, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80
    db 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE, 0xFC, 0xFA, 0xFE

gameOverText:
    db 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0xFE, 0x01, 0x00, 0x78, 0xFC, 0x84, 0xA4, 0x68, 0x00, 0xFC, 0xFC, 0x14, 0xF8, 0x00, 0xFC, 0xF8, 0x10, 0x08, 0xFC, 0x00, 0xFC, 0xFC, 0x94, 0x00, 0x01, 0xFE, 0x00, 0x00
    db 0x00, 0x00, 0xFF, 0x00, 0x00, 0xF2, 0xFA, 0x0A, 0x0A, 0xF2, 0x02, 0x7A, 0xFA, 0x82, 0x82, 0x7A, 0x02, 0xFA, 0xFA, 0x2A, 0x02, 0xFA, 0xFA, 0x2A, 0xD2, 0x00, 0x00, 0xFF, 0x00, 0x00
    db 0x00, 0x00, 0x0F, 0x10, 0x20, 0x24, 0x25, 0x25, 0x25, 0x24, 0x24, 0x24, 0x24, 0x25, 0x24, 0x24, 0x24, 0x25, 0x25, 0x25, 0x24, 0x25, 0x25, 0x24, 0x25, 0x20, 0x10, 0x0F, 0x00, 0x00
    db 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x2F, 0x04, 0xA3, 0x80, 0xAF, 0x08, 0xA0, 0x8F, 0x2A, 0x00, 0xAF, 0x02, 0xAF, 0x00, 0x2B, 0x0E, 0x20, 0x0F, 0x2A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x20, 0x0F, 0xA0, 0x80, 0x2F, 0x04, 0xAB, 0x80, 0x23, 0x0C, 0xA3, 0x80, 0x00, 0x00, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x00, 0x00
    db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x02, 0x2F, 0x00, 0x27, 0x08, 0x2D, 0x00, 0x2F, 0x02, 0x2F, 0x00, 0x2F, 0x00, 0x2F, 0x00, 0x2F, 0x00, 0x03, 0x04, 0x09, 0x04, 0x03, 0x00

gameOverBriks:
    db 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D
    db 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB
    db 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6
    db 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D
    db 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB
    db 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6, 0xFF, 0x24, 0xB6
    db 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D, 0xFF, 0x49, 0x6D
    db 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB, 0xFF, 0x92, 0xDB
gameOverBriksEnd:


dummySilentData:
    db (16 << 4) & 0xF0 | 7, 16, 255
    db 8, dummySilentData & 0xFF, (dummySilentData >> 8) & 0xFF

pauseSFXData:
    db 0, 88, 110    ;1050 52
    db 7, 162, 6    ;0 80
    db 0, 44, 217    ;2100 52
    db 7, 162, 6    ;0 87
    db 0, 88, 110    ;1050 52
    db 7, 162, 6    ;0 80
    db 0, 44, 217    ;2100 52
    db 9

menuNavSFXData:
    db 0, 136, 52    ;685 38
    db 9

levelUpSFXData:
    db 0, 105, 101    ;886 57
    db 7, 162, 4    ;0 60
    db 0, 85, 133    ;1092 61
    db 7, 162, 4    ;0 56
    db 0, 71, 159    ;1312 61
    db 7, 162, 4    ;0 56
    db 0, 52, 216    ;1772 61
    db 7, 162, 4    ;0 56
    db 0, 105, 108    ;886 61
    db 9

piceMoveSFXData:
    db 0, 91, 69    ;1021 34.0
    db 9

rotateSFXData:
    db 0, 85, 40    ;1091 18.2
    db 244, 15, 17    ;364 23.2
    db 132, 24, 4    ;230 8.8
    db 0, 91, 45    ;1021 22.0
    db 244, 15, 17    ;356 23.4
    db 132, 24, 2    ;238 4.4
    db 0, 136, 26    ;686 19.2
    db 36, 18, 15    ;310 24.5
    db 180, 27, 3    ;209 6.4
    db 0, 91, 33    ;1021 16.0
    db 244, 15, 18    ;356 24.0
    db 148, 25, 5    ;226 10.0
    db 0, 138, 28    ;676 21.0
    db 36, 18, 14    ;310 23.2
    db 180, 27, 3    ;209 6.2
    db 9

lineClearSFXData:
    db 212, 45, 13    ;128 50.0
    db 244, 47, 12    ;121 50.0
    db 100, 22, 25    ;253 50.0
    db 148, 25, 23    ;224 50.0
    db 84, 21, 27    ;270 50.0
    db 132, 24, 23    ;237 50.0
    db 52, 19, 29    ;292 50.0
    db 100, 22, 25    ;251 50.0
    db 36, 18, 31    ;315 50.0
    db 84, 21, 27    ;269 50.0
    db 4, 16, 34    ;338 50.0
    db 68, 20, 28    ;280 50.0
    db 0, 254, 37    ;368 50.0
    db 52, 19, 29    ;297 50.0
    db 0, 228, 41    ;410 50.0
    db 20, 17, 33    ;323 50.0
    db 0, 215, 43    ;435 50.0
    db 4, 16, 34    ;336 50.0
    db 0, 202, 46    ;461 50.0
    db 4, 16, 34    ;355 50.0
    db 0, 178, 52    ;524 50.0
    db 0, 202, 46    ;462 50.0
    db 9

lineClear4SFXData:
    db 0, 44, 200    ;2081 67
    db 0, 44, 77    ;2081 67
    db 0, 59, 200    ;1561 117
    db 0, 59, 164    ;1561 117
    db 0, 44, 200    ;2081 67
    db 0, 44, 77    ;2081 67
    db 0, 59, 250    ;1561 151
    db 0, 59, 220    ;1561 151
    db 0, 140, 33    ;664 25
    db 0, 135, 35    ;689 25
    db 0, 130, 36    ;714 25
    db 0, 126, 37    ;740 25
    db 0, 122, 38    ;765 25
    db 0, 118, 40    ;790 25
    db 0, 148, 212    ;630 168
    db 0, 151, 28    ;617 22
    db 0, 145, 29    ;640 22
    db 0, 140, 30    ;664 22
    db 0, 154, 30    ;606 25
    db 0, 158, 30    ;591 25
    db 0, 162, 29    ;576 25
    db 0, 166, 28    ;562 25
    db 0, 171, 27    ;547 25
    db 0, 175, 27    ;532 25
    db 9

piceLandedSFXData:
    db 148, 25, 7    ;222 15.0
    db 196, 44, 4    ;130 15.0
    db 116, 71, 2    ;82 15.0
    db 100, 38, 3    ;150 10.0
    db 164, 58, 2    ;100 10.0
    db 68, 116, 1    ;50 10.0
    db 9

gameOverSFXData:
    db 68, 36, 5      ;158 17
    db 100, 22, 67    ;255 133
    db 196, 44, 34    ;131 130
    db 100, 22, 43    ;255 86
    db 116, 23, 39    ;240 84
    db 148, 25, 23    ;227 52
    db 0xF7, 255, 23  ;pause
    db 0, 178, 141    ;523 135
    db 0, 189, 133    ;494 135
    db 0, 178, 141    ;523 135
    db 0, 189, 133    ;494 135
    db 0, 178, 141    ;523 135
    db 0, 159, 158    ;587 135
    db 0, 178, 141    ;523 135
    db 0, 189, 133    ;494 135
    db 0, 178, 100    ;523 270
    db 0, 178, 181    ;523 270
    db 9

rocketSongData:
    db 0, 142, 197    ;657 150
    db 0, 140, 200    ;663 150
    db 0, 225, 249    ;416 300
    db 0, 189, 255    ;494 300
    db 0, 189, 40    ;494 300
    db 0, 141, 255    ;660 300
    db 0, 141, 140    ;660 300
    db 0, 126, 222    ;737 150
    db 0, 125, 223    ;745 150
    db 0, 212, 255    ;440 300
    db 0, 212, 8    ;440 300
    db 0, 189, 255    ;494 300
    db 0, 189, 40    ;494 300
    db 0, 126, 255    ;741 300
    db 0, 126, 187    ;741 300
    db 0, 112, 249    ;827 150
    db 0, 111, 251    ;836 150
    db 0, 189, 255    ;494 300
    db 0, 189, 40    ;494 300
    db 0, 150, 255    ;622 300
    db 0, 150, 117    ;622 300
    db 0, 112, 255    ;832 300
    db 0, 112, 242    ;832 300
    db 0, 106, 255    ;877 150
    db 0, 106, 7    ;877 150
    db 0, 105, 255    ;885 150
    db 0, 105, 9    ;885 150
    db 0, 212, 255    ;440 300
    db 0, 212, 8    ;440 300
    db 0, 168, 255    ;555 300
    db 0, 168, 77    ;555 300
    db 0, 105, 255    ;881 300
    db 0, 105, 255    ;881 300
    db 0, 105, 19    ;881 300
    db 0, 126, 222    ;737 150
    db 0, 125, 223    ;745 150
    db 0, 212, 255    ;440 300
    db 0, 212, 8    ;440 300
    db 0, 168, 255    ;555 300
    db 0, 168, 77    ;555 300
    db 0, 126, 255    ;741 300
    db 0, 126, 187    ;741 300
    db 0, 150, 186    ;619 150
    db 0, 149, 188    ;626 150
    db 0, 252, 222    ;370 300
    db 0, 189, 255    ;494 300
    db 0, 189, 40    ;494 300
    db 0, 150, 255    ;622 300
    db 0, 150, 117    ;622 300
    db 8, rocketSongData & 0xFF, (rocketSongData >> 8) & 0xFF

btmClearNextPice:
    db 12
    db 0b11111111
    db 0b11111111
    db 0b11111111
    db 0b11111111
    db 0b11111111
    db 0b11111111
    db 0b11111111
    db 0b11111111
    db 0b11111111
    db 0b11111111
    db 0b11111111
    db 0b11111111
    db 0

btmSelectLevel:
    db 7
    db 0b01111111
    db 0b01111111
    db 0b01111111
    db 0b01111111
    db 0b01111111
    db 0b01111111
    db 0b01111111
    db 0

btmRocketSmallData:
    db 19       ;height
    db 33       ;x
btmRocketSmall:
    db 5
    db 0b00000000
    db 0b00000000
    db 0b11101110
    db 0b11010011
    db 0b11101110
    db 7
    db 0b11110000
    db 0b00101000
    db 0b11111111
    db 0b01000010
    db 0b11111111
    db 0b00101000
    db 0b11110000
    db 7
    db 0b00000110
    db 0b00000101
    db 0b00000111
    db 0b00000100
    db 0b00000111
    db 0b00000101
    db 0b00000110
    db 0

btmRocketMidData:
    db 27       ;height
    db 33       ;x
btmRocketMid:
    db 6
    db 0b00000000
    db 0b11111000
    db 0b01010110
    db 0b10010011
    db 0b01010110
    db 0b11111000
    db 6
    db 0b00000000
    db 0b11111111
    db 0b10101010
    db 0b01010001
    db 0b10101010
    db 0b11111111
    db 6
    db 0b00000000
    db 0b11111111
    db 0b01011100
    db 0b01000101
    db 0b01011100
    db 0b11111111
    db 7
    db 0b00000100
    db 0b00000110
    db 0b00000101
    db 0b00000011
    db 0b00000101
    db 0b00000110
    db 0b00000100
    db 0

btmRocketBigData:
    db 37       ;height
    db 31       ;x
btmRocketBig:
    db 8
    db 0b00000000
    db 0b00000000
    db 0b00000000
    db 0b11100000
    db 0b00010110
    db 0b01001101
    db 0b00010110
    db 0b11100000
    db 8
    db 0b00000000
    db 0b00000000
    db 0b00000000
    db 0b11111110
    db 0b10101101
    db 0b00110100
    db 0b10101101
    db 0b11111110
    db 8
    db 0b00000000
    db 0b00000000
    db 0b00000000
    db 0b11111111
    db 0b10101010
    db 0b01010101
    db 0b10101010
    db 0b11111111
    db 10
    db 0b00000000
    db 0b11000000
    db 0b00111000
    db 0b10000111
    db 0b01110000
    db 0b00001101
    db 0b01110000
    db 0b10000111
    db 0b00111000
    db 0b11000000
    db 11
    db 0b00001100
    db 0b00011011
    db 0b00010010
    db 0b00001111
    db 0b00010100
    db 0b00010100
    db 0b00010100
    db 0b00001111
    db 0b00010010
    db 0b00011011
    db 0b00001100
    db 0

btmFireSmallMask:
    db 6
    db 0b00000000
    db 0b00000111
    db 0b00001111
    db 0b00011111
    db 0b00001111
    db 0b00000111
    db 0

btmFireSmall:
    db 6
    db 0b00000000
    db 0b00000111
    db 0b00001100
    db 0b00010000
    db 0b00001100
    db 0b00000111
    db 0

btmFireBigMask:
    db 7
    db 0b00001110
    db 0b00111111
    db 0b11111111
    db 0b11111111
    db 0b11111111
    db 0b00111111
    db 0b00001110
    db 4
    db 0b00000000
    db 0b00000000
    db 0b00000000
    db 0b00000011
    db 0

btmFireBig:
    db 7
    db 0b00001110
    db 0b00110001
    db 0b11000000
    db 0b00110001
    db 0b11001110
    db 0b00110001
    db 0b00001110
    db 4
    db 0b00000000
    db 0b00000000
    db 0b00000000
    db 0b00000011
    db 0

btmLaunchPad:
    db 7
    db 0b01111001
    db 0b01001001
    db 0b01001001
    db 0b01111001
    db 0b01111001
    db 0b01001001
    db 0b01001001
    db 0

btmFume:
    db 27
    db 0b00001100
    db 0b00010010
    db 0b00001001
    db 0b00010001
    db 0b00001010
    db 0b00000100
    db 0b00010010
    db 0b00001010
    db 0b00010100
    db 0b00001000
    db 0b00010000
    db 0b00000000
    db 0b00000000
    db 0b00000000
    db 0b00000000
    db 0b00000000
    db 0b00000000
    db 0b00000000
    db 0b00010000
    db 0b00001000
    db 0b00010100
    db 0b00001010
    db 0b00010010
    db 0b00000100
    db 0b00001010
    db 0b00001110
    db 0b00010000
    db 0


    org $ & 0xFF00 + 256
pice:
    ;((X+1)*3-1)(Y)
piceL:
    db 0x22, 0x52, 0x82, 0x23
    db 0x21, 0x51, 0x52, 0x53
    db 0x22, 0x52, 0x82, 0x81
    db 0x51, 0x52, 0x53, 0x83

piceJ:
    db 0x22, 0x52, 0x82, 0x83
    db 0x51, 0x52, 0x53, 0x23
    db 0x21, 0x22, 0x52, 0x82
    db 0x51, 0x52, 0x53, 0x81

piceI:
    db 0x22, 0x52, 0x82, 0xB2
    db 0x50, 0x51, 0x52, 0x53
    db 0x22, 0x52, 0x82, 0xB2
    db 0x50, 0x51, 0x52, 0x53

piceO:
    db 0x52, 0x82, 0x53, 0x83
    db 0x52, 0x82, 0x53, 0x83
    db 0x52, 0x82, 0x53, 0x83
    db 0x52, 0x82, 0x53, 0x83

piceZ:
    db 0x22, 0x52, 0x53, 0x83
    db 0x23, 0x22, 0x52, 0x51
    db 0x22, 0x52, 0x53, 0x83
    db 0x23, 0x22, 0x52, 0x51

piceS:
    db 0x23, 0x53, 0x52, 0x82
    db 0x21, 0x22, 0x52, 0x53
    db 0x23, 0x53, 0x52, 0x82
    db 0x21, 0x22, 0x52, 0x53

piceT:
    db 0x22, 0x52, 0x82, 0x53
    db 0x51, 0x52, 0x53, 0x22
    db 0x22, 0x52, 0x82, 0x51
    db 0x51, 0x52, 0x53, 0x82

tbl3x1:
    db 0b00000111, 0b00000000
    db 0b00111000, 0b00000000
    db 0b11000000, 0b00000001
    db 0b00000000, 0b00001110
tbl3x1Half:
    db 0b01110000, 0b00000000
    db 0b10000000, 0b00000011
    db 0b00000000, 0b00011100
    db 0b00000000, 0b11100000
tbl3x1End:

scoresAdderByLevel:
    db 0x00,0x00,0x40, 0x00,0x01,0x00, 0x00,0x03,0x00, 0x00,0x12,0x00

scoresAdderInc:
    db 0x00, 0x00, 0x01

delayByLevel:
    db 52, 48, 44, 40, 36, 32, 27, 21, 16, 10, 9, 8, 7, 6, 5, 5, 4, 4, 3, 3, 2

    END
